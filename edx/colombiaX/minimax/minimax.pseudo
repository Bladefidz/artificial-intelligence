function minimax(node, depth, maximizingPlayer)
  if depth = 0 or node is a terminal node
    return the utility of the node
  if maximizingPlayer
    bestValue := ??
  for each child of node
    v := minimax(child, depth ? 1, FALSE)
    bestValue := max(bestValue, v)
  return bestValue
  else (* minimizing player *)
    bestValue := +?
    for each child of node
      v := minimax(child, depth ? 1, TRUE)
      bestValue := min(bestValue, v)
    return bestValue

evaluate (node, alpha, beta)
  if node is a leaf
    return the utility value of node
  if node is a minimizing node
    for each child of node
      beta = min (beta, evaluate (child, alpha, beta))
      if beta &lt;= alpha
        return beta
      return beta
  if node is a maximizing node
    for each child of node
      alpha = max (alpha, evaluate (child, alpha, beta))
      if beta &lt;= alpha
        return alpha
      return alpha